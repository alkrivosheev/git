Шпаргалка по GIT
Области хранения в GIT
-  Рабочая директория(Working Directory)
-  Индекс(Staging Area)
-  Репозиторий(Repository)

Статусы отслеживания файлов
-	Untracked (Неотслеживаемый)
-	Unmodified (немодифиц)
-	Modified (Модифицир)
-	Staged (подготовленный)

Объекты в GIT
-	Blob (Файл)
-	Tree (Папка)
-	Commit
-	Annotated Tag

ГЛОБАЛЬНАЯ НАСТРОЙКА
git config --global --list  Выводит список переменных и их значение
git config --global user.name "<ИМЯ>"    Задает имя в глобальном файле конфигурации
git config --global user.email "<АДРЕС ПОЧТЫ>"   Задает email в глобальном файле конфигурации
git cat-file -t <hach полностью или первые 7 символов>		Выдает тип файла в гит репозитории (.git\objects). 
	Типы бывают следующие: commit(указатель на дерево изменений), blob(файл с даннымиб листья дерева), tree (папка)
git cat-file -p <hach полностью или первые 7 символов>		Выдает содержимое коммита

ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ
git init   инициализация репозитория
git init -b main 	инициализация репозитория с заданием имени ветки (main)
git status 	Показывает состояние рабочего каталога и промежуточной области

git add добавляет новые или измененные файлы для последующего коммита
git add <имя файла>  добавляет файл в промежуточную область
git add <имя файла> <имя файла> 	Добавляет несколько файлов в промежуточную область
git add -A		Добавляет все измененные файлы в промежуточную область
git add .		Добавляет все измененные файлы в промежуточную область

git commit -m "<сообщение>" 	Создает новый коммит с сообщением
git commit -a -m "" тоже, что последовательное выполнение git add. и git commit -m, но добавляет только modified файлы. А новые нет. 
git commit --amend -m ""	дополняет последний коммит, дбавляя в него свежие изменения.
git log    выводит список коммитов в обратном порядке

git diff		показывает разницу между текущим состоянием репо и неотслеживаемыми изменениями
git diff --staged	показывает разницу между текущим состоянием репо и отслеживаемыми изменениями(в индексе)
git diff <hash> 	показывает разницу между текущим состоянием репо и указанным хэшом коммита

!!!!!!!!!!!!!!!!!!!Использовать только до отправки в удаленный репозиторий!!!!!!!!!!!!!!!!!!!!!!!!!!!
git reset [--soft|--mixed|--hard][hash] 		отмена изменений и откат проекта в режиме soft, mixed или hard к какому либо снимку (hash или HEAD^(HEAD~1)(один шаг назад) )
		Не удаляет только что созданные untracked файлы.
	--hard		удаляет все коммиты после указанного безвозвратно (git reset --hard HEAD^^ - полностью удаляет два последних коммита)
	--mixed	(по умолчанию)	сами коммиты удаляет, но все измененные файлы переводит в неотслеживаемую зону(unstaged) (git reset --mixed HEAD^^)
	--soft		сами коммиты удаляет, новсе измененные файлы переводит в отслеживаемую зону(staged) (git reset --soft HEAD^^)
git reset = git reset --mixed HEAD -- возврат к последнему коммиту
!!!!!!!!!!!!!!!!!!!Использовать только до отправки в удаленный репозиторий!!!!!!!!!!!!!!!!!!!!!!!!!!!

git clean -f 	-удаляет файлы untracked, но не трогает modified
git clean -n	показывает список подлежащих удалению файлов

ВЕТКИ
git branch  выводит список локальных веток
git branch <имя новой ветки>  создает новую локальную ветку
git branch -m <имя новой ветки>  переименовывает текущую локальную ветку
git branch -d <имя ветки>  удаляет локальную ветку(текущую ветку удалить нельзя)
git branch -r 		список веток на удаленном сервере
git switch <имя ветки>     переключает ветку
git switch -c <имя новой ветки>   Создает новую ветку и переключает HEAD на нее

git checkout [<хэш>|HEAD^^|HEAD~2] перемещает указатель HEAD на хэш коммита или на указанное число шагов назад. 
			Указатель HEAD при этом переходит в состояние DETACHED, любые изменения или коммиты сделанные в этом состоянии удалятся.
			Для сохранения нужно создать новую ветку от этого места.
git checkout <хэш> --file1 file2		Возвращает только выбранные файлы к указанной версии. Но HEAD остается на месте.
git checkout -- .		Вернет все измененные файлы к последнему коммиту
git checkout <имя ветки>    перключает ветку, либо передвигает указатель в конец ветки(Пееключает HEAD на выбранный коммит)
git checkout -b <имя новой ветки>Создает новую ветку и переключает HEAD на нее

git merge <имя ветки>     выполняет слияние ветки текущей ветки (receiving branch) с другой веткой <имя ветки> (feature branch) 
git merge -m <имя ветки>     выполняет слияние ветки текущей ветки (receiving branch) с другой веткой <имя ветки> (feature branch) c сообщением для merge коммита


Процедура слияния : 
1. Создать новую ветку (new-feature) из ветки main 
2. Вносим измнения в проект в ветке (new-feature), создаем коммиты в данной ветке.
3. Также в ветке main также вносятся изменения и делаются коммиты.
4. Для выполнения merge коммита переходим в ветку main и выплняем команду "git merge new-feature"
5. После слияния ветку new-feature можно удалить (git branch -d new-feature).
 сначала перейти на ветку ниже, которую мы подтягиваем к актуальной

!!В Режиме Fast-Forvard не создается merge commit, просто подтягиваются коммиты из боковой ветки!!
!!В режиме 'ort' или 'recursive' Если в ветке master тоже были коммиты, параллельно с боковой веткой, то при слиянии создается merge commit, указывающий на обе ветки
при этом в терминале откроется редактор, в котором можно отредактировать итоговый комиит(После редактирования нажать ESC :wq)!!
!!В случае работы с удаленными ветками нужно только учитывать что локально создается ветка origin/master и именно она проходит процедуру merge
!!
 
git switch main
 затем подтягиваем ее к актуальной
git merge feature

!!!!!!!!!!!!!!!!!!!!!!!!REBASE!!!!!!!!!!!!!!!!!!!!!
Как и merge, команда rebase предназначена для слияния веток
-команда merge безопаснее, есть отдельный коммит, отражающий слияние.
+rebase лаконичная история, без лишних коммитов, а у merge достоверная и полная история коммитов
-Если в ветке долго велась работа и произошло много изменений то лучше использовать merge
-Если ветка была короткая то лучше rebase
!!!!!!!!!!!!!!!!!!!!!!!!REBASE!!!!!!!!!!!!!!!!!!!!!
 Процедура слияния Reabase
 1. git checkout master	переходим в ветку master
 2. git rebase add-feature1 делаем rebase второстепенной ветки, как бы вставляя все ее коммиты в ветку master в разрыв между началом втор ветки и след коммитом основной.


!!!!!!!!!!!!!!GIT CHERRY-PICK!!!!!!!!!!!!!!!!
Используется тогда, когда надо взять один или несколько коммитов из другой ветки в нашу
Процедура переноса коммита в нашу ветку
1. git checkout <master>		убеждаемся, что мы в целевой ветке
2. git cherry-pick <хэш коммита>		переносим коммит с выбранным хэшем, независимо от ветки в которой он расположен. В целевой ветке появится новый коммит с новым хэшом.

git cherry-pick --edit		позволяет поменять сообщение коммита при переносе
git cherry-pick --no-commit <>	помещает выбранный коммит в отслеживаемую зону, а не в коммит целевой ветки.
git cherry-pick --signoff <>	Указывает в сообщении коммита имя того, кно совершил вызов cherry-pick


УДАЛЕННЫЙ РЕПОЗИТОРИЙ
git remote show <origin>   показывает полную инфу по удаленным веткам и связям
git remote выводит список подключений  к удаленному репозиторию в виде коротких имен
git remote -v	выводит список подключений  к удаленному репозиторию в виде коротких именем и URL адресов
git remote add <название  репозитория> <URL>    Добавляет подключение к удаленному репозиторию с именем по адресу <URL> (SSH или HTTPS)
git remote remove <название репозитория> удаление репозитория 
git fetch 		только скачивает с внешнего сервера указанную ветку
git push -u origin main		связываем ветку origin/main c веткой main. Если нет доступа то генерируем новый токен на github и вводим его в качестве пароля.
git push <название репозитория> <имя ветки>  Передает содержимое ветки <имя ветки> в  удаленный репозиторий <короткое имя>
git push (-d)|(--delete) <origin> <add-feature1> 	удаляет ветку на внешнем сервере
git pull = git fetch + git marge origin/master <название репозитория> <имя ветки> скачивает  и копирует ветку(все возможные ветки) из удаленного в локальный репозиторий
git clone 	заменяет три команды(init, remote add, pull) и пердназначен для клонирования репозитория на локальную машину.
git branch --all   выводит список локальных веток и веток удаленного отслеживания
git branch -vv		Показывает связи между локальными и удаленными ветками




-если нужно добавить папку или файл в gitignore
git rm -rf --cached .idea     Удаляет папку .idea из внутреннего хранилища.
git rm -f --cached .idea     Удаляет файл из внутреннего хранилища.